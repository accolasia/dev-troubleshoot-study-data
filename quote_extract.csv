Participant,Start,End,Code,Quote,,,,,,,,,,
P02,"45:53,220","46:15,580","Bus problem of one, means nobody knows how this thing works","And so a bus problem of one is bad, because it means if I'm out sick or something, now nobody knows how this thing works. And that's never a good thing. Or if I just go on leave or leave the company, nobody knows how all of this institutional knowledge works anymore.",,,,,,,,,,
P02,"47:06,700","48:21,240","Challenge of having contributions measured in metrics of impact to the business, that make it hard to prioritize other important work","- I think the biggest challenge that software faces just in general, is a lot of our contributions are measured in metrics. And a lot of that is measured in impact to the business. That means it's really hard to prioritize technical debt. It's really hard to prioritize developer experience work that makes it easier for everybody to do their job because that isn't delivering the product that you're intended to. And so because the metrics for that become more complicated, you run into like a measurability bias of, it's easier to measure the contributions to the product. And so it's better to do that rather than make these behind the scenes improvements that would make it so we can improve things and deliver code faster and do all of those same changes, but even better and faster. We just need to spend this week doing this other thing first. That is politically just really complicated to actually execute and takes a long time. And usually you get a lot of just questions that make leadership uncomfortable.",,,,,,,,,,
P02,"36:42,120","37:24,860","Clarifies when it’s preferable to use email to ask for help instead of chat, as when it’s someone not regularly speaking, and non-urgent.  The medium changes the expectation around how soon you expect a response","If I'm speaking with somebody who I am not regularly speaking to, like non-teams, and it's a non-urgent thing, I use email instead of chat. That's just a personal preference, but also the weight, I guess, of how soon you're expecting a response seems to change with those two forms of communication. If I send an email and you respond tomorrow, that seems more acceptable than if I send a chat message and see you're online, and then you respond tomorrow. Even though it's the exact same response and the exact same interaction, it socially just feels different. So I try to do email just so there's no time pressure.",,,,,,,,,,
P02,"09:41,580","10:14,260","Defines a dimension of troubleshooting situation as “scale” of the problem, contrasting my dev environment is broken, vs everybody’s dev environment is broken","And it can scale as well. If my developer environment is broken, that's different than if everybody's developer environment is broken. If nobody can contribute code to the product, that becomes significantly more of a problem, and then you have to scale up how you're addressing that and look at it with a different view in that case. So figuring out, is the problem just me or is it everyone?",,,,,,,,,,
P02,"05:56,320","06:35,140","Defining “observable” by comparison with how a car works, and if your tire is flat, you can take that system and isolate it, and because you can isolate it, you can figure out whatever the problem is.","I make a lot of comparisons to cars when I try to talk about an observable system and being able to understand it. You don't need to know how a car works, but if your tire is flat or something, you can take that system and isolate it. And then because you can isolate it, you can figure out, ""Oh, I need to add air to the tire,"" or, ""I need to change the tread on the tire,"" or, ""Maybe the hubcap is missing,"" or, ""This bolt is missing,"" or whatever that problem is. Because you can isolate the solution into that single item, rather than looking at the the whole of the car becomes really easy.""",,,,,,,,,,
P02,"04:40,400","05:07,240",Defining “transparency” as the ability to inspect the system as a means to understand it,"So the thing that makes troubleshooting easy is, again, that transparency, being able to  inspect the system and understand it. So for example, open source libraries are really good at this, I've found. If you're working with open source, you have access to the source, you can go into it and actually inspect it. And because it's the source code, a lot of the times the documentation and such is preserved in those things.",,,,,,,,,,
P02,"07:32,500","08:01,620","Difficulty to attach a debugger with multiple processes, relying on tracing","It also is kind of hard to attach a debugger  in that environment. There's no real good way to attach a debugger to seven different processes, for example, or to a horizontally scaled thing. That just isn't something that is very easy to do. And so in those kind of systems, it's a lot of reliance on tracing and being able to track a user journey using those traces and then relying on metrics and things.",,,,,,,,,,
P02,"24:20,300","24:47,940","Feeling relieved after troubleshooting, not joy or happiness, but like a term paper that’s finished, and you’re like okay, that’s done","Relieved, I would say. Not like joy or happiness, just like, yes, this is done. Like you have like a term paper or something, you just turn that in and you're like, okay. or a final in school. You hand that in, you're like, okay, I don't know how I did. I don't know if it works, but that's done. That tends to be how I felt in that case.",,,,,,,,,,
P02,"06:39,620","06:56,140","In a production system, it’s really hard to tell what’s happening, even if you have an observable platform, at least without a lot of time and energy and money","Once you start running something in production, it gets really hard to tell what's happening, even if you have an observable platform, at least without a lot of time and energy and money. It becomes really hard to tell what's actually going on there.",,,,,,,,,,
P02,"43:20,340","44:12,460",Leading people to think a little bit about it by asking questions is much more effective than telling someone what to do.,"And those kind of questions lead people to think a little bit about, oh, how would that work? that wouldn't work very well. And then they can sort of go along that path and start answering those kind of things. And you can sort of use that. I found it not very effective if you just tell somebody what to do. If they're asking for that, then that's fine. But if you just tell somebody what to do, most of the time they're just going to not want to do that and they're going to want to do their thing. So part of what I try to do when I'm working with troubleshooting something is kind of try to change how the person thinks. Or help them find the answers to the questions that they're asking without giving those answers,",,,,,,,,,,
P02,"48:31,100","49:01,660",Making building software easier can be a tough sell,"is like building things that make building software easier is what I like to do. But also, there's a lot of conflict when that happens, because you're not building the thing that business wants you to build necessarily. And so figuring out how to consolidate that or make that an easier thing to sell is I think the big thing. And that might just be a communication thing. It might be a cultural thing, but it's always been hard, so.",,,,,,,,,,
P02,"52:31,140","53:03,800",Putting your name on a problem makes it your problem,"And once you start it and put your name on it, now it's your problem, it's not everybody else's problem anymore. And that can be really intimidating, I think. It can kind of scare a lot of people away from even wanting to do that work, because once you touch something, you're now the latest commit in Git. And everybody's going to ask you how that thing works. And so you really have to think, do I want to be that? So that's more of a cultural thing though.",,,,,,,,,,
P02,"04:05,660","04:26,600",Shares example of the meaning of “not being a transparent system” with an example of an error in CI/CD,"That's an issue, I think, with CI/CD not being a transparent system. it's something where you upload a thing to another computer, it runs something and then exits, and you get one error, and you don't get to attach a debugger or do any of this other stuff that you would with a local development environment, that becomes inaccessible to you.",,,,,,,,,,
P02,"31:26,940","31:56,740","Taking notes in Obsidian when talking to people about what their role is, what team they work on and what languages and systems do they work on, then using this as a way to find specific people","So I will make notes of when I talk to people, What is their role? What team do they work on? What languages and systems do they work on? And then you can use that as a way to find specific people. And maybe they don't know how to solve this specific issue, but they're more familiar with that problem space than you are. And so they can get you on to who you actually need to talk to. So that tends to be how I go about things.",,,,,,,,,,
P02,"02:05,900","02:36,100",Understanding the answers to questions requires going out and talking to the community that is actually encountering those problems,"And a lot of times there are questions that we internally do not know the answers to. And so you have to go out and talk to the community and speak with other people for actually encountering those problems, especially I think that's sort of a general role or occurrence I've seen in industry or in infrastructure rather, where you sort of have to speak to the people who are actually building the things to actually understand why it's important. 'Cause you can guess, but it doesn't tell you everything you need to know.",,,,,,,,,,
P02,"17:21,420","18:03,500",Working on coding for a couple days and having multiple people making changes to the code you’re working in at the same time,"In those cases, it would be very common for you to be working on something for a day or a couple of days and have multiple people make changes to the code that you're working in at the same time because that's just the nature of that role. And so as you're working on this thing, it would actively be mutating and changing. So potentially new features would be rolled out or a feature flag would be flipped, and suddenly it just looks different. We're like, now this happens instead. And there isn't necessarily any visibility into that. You just-- suddenly the system is different now.",,,,,,,,,,
P02,"45:05,660","45:34,220",Writing up a doc and bringing people in before a decision is made empowers people to have input on a system (theme: thriving/agency),Also kind of going back to the docs where you can kind of bring people in before you made the decision. It empowers those people to kind of have input on a system rather than trying to like come in afterwards and change what you've already done. 'Cause then that feels more political. And so those kinds of things I think are really important. It just makes software better. I think that's the big thing. It also makes it more maintainable,,,,,,,,,,
P04,"15:11,240","15:35,640","Challenge of trying to collaborate on a problem without some kind of share screen, nothing other than text makes it super difficult"," If we can't sort of share screen, that's a problem because now I'm basically taking all this and you know if we can't so if we can't communicate using anything other than text then that makes it super difficult because we're basically there's a lot there might be a huge amount of context and trying to to push that through a very low bandwidth communication if we can screen share and audio then then then that’s ideal. ",,,,,,,,,,
P04,"11:22,020","11:41,060","Feeling relieved that the problem was resolved, but still frustrated about wasting time because of a lack of information","Sort of relieved, but also, again, sort of frustrated that we have to waste our time on chasing down something that wasn't a bug, just like lack of information.",,,,,,,,,,
P04,"30:03,320","30:44,440",Highlighting importance of questioning assumptions and fully understanding the problem you have,"questioning assumptions. So kind of from the examples I've given like, do you fully understand the problem you actually have? Because right then and there, it's very easy. It happens to me quite a bit of solving a problem that's not the one that you have. And because it looks a lot like ones you've seen before. And so, because we tend to pattern match against our experience it's like, oh, this is like this other thing. And then it's not at all all like this other thing because you missed something. So being really careful about what do you see and what did you expect?",,,,,,,,,,
P04,"01:49,840","02:33,640",Troubleshooting is easy when it’s something that I just did prior to noticing the problem.,"It's easy if the problem is something that I just did. So I caused the problem just prior to noticing the problem. So basically a coding error that I immediately noticed. What makes it hard is I have some wrong assumption and I don't know which assumption is wrong. And it could be because I'm unfamiliar with the code base or... Actually, it's usually... I'm unfamiliar with the code base in some way even though it might be my code base or might be one that I've been working on for while memory fades. ",,,,,,,,,,
P04,"32:50,440","33:41,080","Underlying troubleshooting is an experimental approach, of changing one tiny thing and see if that changes things","I think what underlies a lot of this is very much sort of an experimental approach. Let me change one tiny thing and see if that changes things. It did or it didn't. It didn't. Okay, then this is not part of it. Let me change one other tiny thing because what I see a lot of is let me change a whole bunch of huge things or just a whole bunch of things all at once. Oh, it works. Well, which one made it work?  I don't know, but it works now. So who cares? Well, then the next time it breaks, what are you going to do? So for me, TDD is also an experimental approach. So very much changing small things and seeing their effect instead of trying to change a bunch of things really is something that underlies, I think, a lot of the way I think about it.",,,,,,,,,,
P06,"48:36,620","49:24,100","Benefit of collaborating, “adding to my thinking” and helping to “clarify thinking” and “pointing to holes in my thinking” and developing strategy and steps","He is like, he, I don't know if it's the right word, he added to my thinking. So I wrote like one, like my thesis or like the strategy down and each step. And it helped me to clarify my thinking and he could point to some holes in my thinking stuff. I didn't think about maybe to add some, we added some extra plausibility, clauses, some extra tests to, yeah, he was like my QA department.",,,,,,,,,,
P06,"04:28,180","04:42,520","Characterizes organizational structure as a visual picture of rings, an inner ring of team members, and an outer ring with boss and scrum master and customers on outer rings.",it came to mind the picture of some rings. The inner rings are the team members. the outer are like my boss and the scrum master and stuff. Yeah. And the customers are maybe on the outer ring.,,,,,,,,,,
P06,"16:42,440","17:27,580","Describes strategy of stating a more formal hypothesis that could be confirmed or falsified, writing down what is learned, then formulate the next hypothesis","I really tried to formulate-- I don't know if it's the right word-- a hypothesis to-- I think the problem is there. And then I tried to either confirm it or falsify it and try to write down what I learned there and then formulate the next hypothesis. So if it's not really clear cut, but I try to, I think because I try to really formulate and say it out loud or tell it to a colleague because to get the words out of my sometimes confused head to the colleague to make it more sense.",,,,,,,,,,
P06,"18:21,920","19:24,500",Describes troubleshooting as a process of trying to get clearer,"Um, yeah, for me, it's sort of having like to, yeah, I have a methodical approach, just write down the first thing. I'm not sure about it. Try to get clearer about this and try to learn, uh, some unknown stuff like a software system. I'm not too familiar with learn it piece by piece. I had yesterday, I had a production problem to troubleshoot and those are",,,,,,,,,,
P06,"14:07,880","14:43,060","Enhances troubleshooting ability by writing down, in own words, what the problem is, and draw own boxes, about what the parts are.","- Write down in my own words what I think what the problem is. Um, draw my own boxes. Basically what I think, where, what the parts are. Um, make lists. I'm I'm a big write down, draw down, uh, make lists what I want to test.",,,,,,,,,,
P06,"15:30,620","15:55,400",Observes that when it’s difficult to find the words to describe a problem its an indicator of what isn’t really understood,"I try to write it down a lot and to get the first thing where my, where I can't really find the words for it or where I have trouble describing the problem as well. Then I found a spot where which I didn't really understand. So sorry, I'm struggling a bit with the words. ",,,,,,,,,,
P06,"16:07,640","16:32,320",Recognizes the goal of this rubber duck debugging activity is to achieve clarity,I think the main focus or what I'm trying to do is achieve clarity. What I yeah is the problem. Do I understand the problem? Do I have an idea with which parts are affected.,,,,,,,,,,
P06,"28:02,880","29:13,440","Uses historical notes to remember hard facts like CLI commands, names of servers, or user accounts for stuff so the it’s easy to reference later","- To my notes, what I've written down? I maybe if I wanted to remember like a certain CLI command or stuff like this, some stuff. Yeah, I wrote write down commands that I don't want to forget or want to easily find. I have a reference page in Obsidian where stuff like the new server is called this, and this is the user or stuff. And I don't get to-- so I go more back to this kind of easily to reference or easily to get back. More like these hard facts, I go back to them. I don't really go back to the problems I'm trying to formulate.",,,,,,,,,,
P06,"09:09,420","10:37,080","Visualizes the pathway between the UI and the database broken up into various sections where there are interfaces and borders to each section, and assumptions can be checked at these boundaries","So I have the picture in my mind, something happens in the UI and I'm, I cut like the, the whole way from the UI to the database. Maybe for example, somebody typed something into a form, clicks the save button and it's the information gets stored like in some wrong way into the database. Then in my mind, I cut up the way between the UI and the database in various sections, like chunks or stuff. And what I do is when I have an idea where the interfaces are or the borders of the chunks or sections, I check my assumptions about along the way, uh, how should the data behave? What, what should the, where you, uh, the values be, is it converted the right way? So I, I have like my, I don't go with the, with a comb through, through it all, like, like find granular, but I, I checked like the borders of the individual chunks to maybe rule larger sections out which may not be causing the problem. I hope this comes up understandable. ",,,,,,,,,,
P10,"22:38,040","23:06,920",Adding diagnostic info to the test that dumped out the state information to a file to increase speed of iteration and get better introspection into what was going on,"I then had it, dumped it out to a file and wrote that file out so I could then kind of like write more direct tests against that state rather than to really kind of like understand what was up with the state rather than doing that full test. So that's something to kind of like increase the speed of my iteration as well as kind of getting better introspection into what was going on.",,,,,,,,,,
P10,"07:49,980","08:19,500",Analyzing the “crumbs” left behind as evidence giving useful information about what’s going on.,"all a dead end because it wasn't that it was something else, but that's kind of what guided it. And I guess that's really also kind of like absent any evidence. So if there's any kind of of like crumbs left. If the system is failing in a way that is giving me useful information about what's going on, those are often the crumbs that I'll pick up in order to say, OK, well, I will kind of go down that path in order to do it.",,,,,,,,,,
P10,"04:55,260","06:20,620","Attributing the nature of the error message and feeling of whether you’re actually making progress or not, as affecting this experience of ease or difficulty"," Well, right, so yeah, so it's that nature of the error message and kind of feeling like you're actually making progress through it. So if I'm troubleshooting and trying things and if it's like dead end after dead end and you're always going back to square one, to me that's very difficult because you're not gaining any additional knowledge in that experience. So it's like sure you're in the case of like you're not actually really ruling anything out. Like if you go down a dead end and then that dead end you actually learned that like, oh, this lets me exclude a set of the potential solution space of what it could be, then you did actually learn something. But if you're troubleshooting and everything you try, you don't actually gain any information that even indirectly puts you towards the path of solution. To me, that's what is a very difficult troubleshooting experience. So I guess I always want to be somehow gaining some bit of knowledge with each step that I take, whether it is like, that's called positive knowledge that is telling me a fact about it, that it might be honing me in, or negative knowledge that is kind of like exclusionary and kind of like taking away, like it's still reducing the solution space that I'm dealing with.",,,,,,,,,,
P10,"23:06,920","23:19,960","Banging on it all day and getting nowhere, so going home and going to bed, then had insight in the shower","I was really banging on it, banging on it, wasn't getting anywhere. This was kind of Friday evening, so that I went home, went to bed. Next morning, in the shower after the gym, I had kind of an insight that",,,,,,,,,,
P10,"06:36,620","07:07,820","Deliberately focusing on strategies and cites “intuition” as the first word that comes to mind, but that’s not quite right, reframes as “experience knowledge” that guides the strategy","Let's think about strategies first rather than tools.  At this point, there's a certain amount of intuition is the first word that came to mind, but I think that's not the best phrase. It's probably more something that, something more experience knowledge, experiential based of, based upon what I've seen before, like this problem smells like this sort of thing. And that kind of guides the strategy.",,,,,,,,,,
P10,"26:50,740","27:09,620","Feeling extremely frustrated because in mental model, everything should work, but it clearly wasn’t and the reason why mental model was wrong was not clear"," I was extremely frustrated because it was unclear what was going on. My mental model was that everything was, everything should work, but it clearly wasn't working and the reason why my mental model was wrong was not clear. As I said, when I was",,,,,,,,,,
P10,"27:58,820","28:47,060","Feeling extremely frustrated was basically a nagging feeling, realizing that my mental model was wrong somehow, but the reason why was elusive because I was confident that my mental model was true.  A very frustrating feeling.","in there. So it was basically that nagging feeling. I realized I felt that my mental model was the thing that was wrong somehow, but the reason it was wrong was elusive because I was fairly confident that my mental model was true. So that was just a very frustrating feeling and that's why it was difficult to like, you know, it's like, whatever, it's Friday, it's late enough, let me put it away. And then kind of that like stewing in the back of the head for 24, not 24, 18 hours was enough to then have like something else pop, a different strategy pop into my head about, oh, what if you tried this to try to gather more information to figure out what was going on.",,,,,,,,,,
P10,"40:40,580","41:17,180",Feeling stretched because trying to multiplex attention,"- It leads to feeling stretched, because I'm trying to multiplex my attention, and both obviously one, there's an existing commitment that I have of talking to whoever I'm talking to, and at the same time, I also don't want my colleagues to feel blocked, or actually be blocked because that's preventing them from making forward progress on their work. So it's a struggle and leading to feeling stretched and over committed because I'm trying to basically do two things at once.",,,,,,,,,,
P10,"46:56,700","47:18,380","Highlights the key thing of team troubleshooting is making sure everybody has the same context, so as a clue is discovered, everyone should be aware of that and be able to incorporate that same information into the mental models they’re building about what’s going on","I guess that's kind of the key thing in a team troubleshooting thing is you want to make sure that everybody has all of the same context because as somebody discovers a clue about what might be going on, you want to make sure that everybody is aware of that and can incorporate that same information into the mental models that they're building about what's going on in the system.",,,,,,,,,,
P10,"47:59,700","49:06,940","Leaving a failing test and finding it more easier to pick the task back up and get into flow, that it’s easier to drop back into the flow state by starting from a troubleshooting perspective than a fresh perspective.","So if I'm working on feature development and I'm writing tests as I go in order to build stuff, if I stop at the end of the day with like, oh, yeah, I'm at a stopping point because I just finished something, my test passed, everything's good, I'm going to leave it there and I'll come back the next morning and pick that up, that can be more difficult to get back into that flow state in terms of that productivity. But if I leave it where I have a failing test, I find that is then easier to pick back up. Like if I, it's easier to drop back into the flow state by starting from a troubleshooting perspective rather than starting from like a fresh perspective. So I'll often leave myself a failing test that kind of represents where I am rather than kind of like leaving a tidy desk, so to speak. So there's that like benefit of troubleshooting as a way of again, that's what I'm saying, like it's bridging my flow state from one day to the next to be able to like get back to it.",,,,,,,,,,
P10,"26:07,400","26:42,020",Leaving behind debugging code that enhanced fail case to describe itself more and the ability to dump out the state to a file for external inspection to make it easier for devs to troubleshoot next time,"So I left some-- I left most of the debugging code that I had put in of where I had this-- the test that I had written-- or the test that I was working on, the kind of that slower one, the same way that I enhanced the failure case to kind of describe itself more and then have the ability to dump out the state for external inspection. I left all that code in because even though it wasn't running anymore because the test was now passing, To me, that was useful stuff of if this were to ever fail in the future, that now exists and it can be used again.",,,,,,,,,,
P10,"30:54,820","31:05,340","Reaching out for help only when feeling really, truly, stuck, very stuck","- Only when I feel really, truly stuck. I have to feel very stuck in order to reach out to a team member.",,,,,,,,,,
P10,"10:01,820","11:32,820",Shares example of when would craft a tighter feedback loop to “poke” at a problem better ,"I try to craft, if possible, a tighter feedback loop for the problem in order to poke at it. So this is sometimes a debugger, but not often a debugger. So if it is like a code-based problem that I have, I will often go back to tests. So let me write a -- if there's a larger test that's failing and it's failing in a curious way, and, you know, again, I'll probably start with a debugger to see if that kind of, like, lends it to the solution. But I only spend a little bit of time there because the debugger can kind of give me a lens into what's going on, but it doesn't give me a feedback loop to actually test and verify hypotheses. And then maybe it's like, okay, well, let me write a more targeted test. Let me figure out, it's like, I realized this is where the problem is. Let me write a targeted test that is only focusing on that bit of code and see if I can get that to fail in the same way and then start to kind of attack that problem. So I would maybe generalize that as almost like ad hoc tool construction based upon the things that I have in order to very quickly poke at the failure that I'm seeing, to be able to enable me to iterate quickly towards that solution.",,,,,,,,,,
P10,"43:39,740","45:29,940","Sharing a strategy of teaching troubleshooting skills by going through a tool for observing the production system, and looking at the data for the week (CPU, memory, GC), and if there’s a spike or something, even if it’s not a problem, can we figure out why it happened?","Yeah, so used to do this on the team that I was on before. There's a new system that we had built and kind of every week as part of the on-call handoff, we looked through the different, we used the tools that we had to observe the production system just to see what they've been doing over the past week. And if there was anything, you know, this is to kind of like, you know, look at the charts for like, like CPU usage, memory usage, GC behavior, including the monitoring we had on the database in terms of query performance and some other like the tool that we had that to look at the traces. And it was to kind of go through these tools to kind of build experience using the tool because it'd be better to learn how to use this tool in practice mode, rather than learning how to use the tool at the same time you're trying to troubleshoot. then you have an idea of what the tool can do and how you can use it to solve problems. And then we also kind of dig back, looking under rocks is the metaphor. So in the act of looking to see how the system has been doing over the past week, there wasn't necessarily anything that popped out to us this past week, but if we're looking at the chart and see this funny spike of something, maybe there's a spike in requests, well, even it didn't generate a problem, well, let's see if we can figure out why. Why did that happen? And just using that to answer a made up question about the system is learning how to use the tools and troubleshoot. So it is kind of that like fire drill scenario of figuring stuff out. And that ended up being really useful for the team. And we did like sometimes find kind of like lurking gremlins in the system that weren't actually problems now, but they were beneficial things to address. ",,,,,,,,,,
P10,"22:04,300","22:15,040","Starting to poke more at the data by tweaking the test, but it didn’t seem to do much","I then started poking more at the data. I then kind of like continued to tweak that test to, again, I was like kind of poking at it.",,,,,,,,,,
P10,"12:38,420","13:06,620",Troubleshooting strategy in a deployed system relies on whatever tools I made for myself to enable me to “poke” the product system.,"The strategy still kind of remains the same, where I'm relying on my intuition to guide me, and looking for evidence in terms of to figure out where the initial path might be. Tooling then, that's where it starts to get tricky, because you rely on, I have to rely on what tools did I make for myself to enable me to poke the product system.",,,,,,,,,,
P10,"23:44,600","23:54,040","Working on a weekend, not typically but because had this insight and felt the need to test to see if that’s what it was","So then, you know, like, you know, don't normally work on the weekends, but because I had this insight, I was like, I need to test to see if that's what it was. So when I then ran that",,,,,,,,,,
P11,"40:19,060","40:57,160",Asking for help the moment you come across the issue as a cultural norm in an all-woman or co-ed team,"But I've worked on mostly co-ed or all women development teams. So on those teams, you ask the moment you come across the issue. Because that's just normal. Like, you come across the issue and you just say, Hey, _____, this is an issue. Do you know what this is?"" And she'll say either like, ""Oh, yeah, I totally know. Okay, like move out of the way, you know, I'll fix it for you."" Or ""I'll show you like what it is."" Or she'll be like, or you ask everyone, they don't know. And then it's up to you to be the hero and fix it.""",,,,,,,,,,
P11,"45:21,680","45:27,980","Characterizes motivation in male-dominated culture of why the “anti-asking for help” as an attitude of “you don’t have value, unless you [do the extreme] to prove your value.”","oh, it's like an attitude like you don't have value unless you kill yourself to prove your value.",,,,,,,,,,
P11,"45:35,060","45:56,560","Characterizes motivation in woman-dominated culture of why “ask for help early” as an attitude of “you already have value, just be good.  Do your best not to let the team down, but you’re valuable already”","or like the all female team I worked on, It was just like, you already have value. Just be good. Like you have value, just do your best and don't let the team down, but you're valuable already.",,,,,,,,,,
P11,"41:10,340","41:41,260","Considering it really stupid to come across something and not ask for help, because it could be something really esoteric that has nothing to do with your skills as a developer","But on the all female team I worked on, it was considered really stupid to come across something and not ask for help, because it could be something really esoteric that has nothing to do with your skills as a developer, but just like, Oh, yeah, you have to add two spaces here."" Or, Oh, yeah, we hacked this. So you actually just need to pass the string to make it work. Why would you spend four hours on that? Trying to fix that, right?""",,,,,,,,,,
P11,"51:08,200","51:30,200",Describes ideal as giving people the time to properly troubleshoot and document and keep the documentation up to date for the issues they come across.,"So you need to give people the time to properly troubleshoot and document, document and keep the document documentation up to date the issues they come across. You need to give people the time to do that. So properly documented.",,,,,,,,,,
P11,"52:51,280","53:05,580","Describes strategy for implementing new tools given constraints of companies, as very low learning curve and just fits in, slide it into the workflow of the developer",So it would have to be something that has a very low learning curve and just fits in just like you can just  slide it into the workflow of the developer.,,,,,,,,,,
P11,"07:15,320","07:46,860",Highlighting challenges with depending on outdated frameworks and technologies,"When you're using outdated frameworks, when you're using outdated software, the community has moved on. So you're watching videos on YouTube from eight years ago, you're reading threads from like seven years ago, it's very difficult to get help. On top of that, if you're using an outdated technology, okay, things start failing now. And there's no way to fix it because it's just deprecated.",,,,,,,,,,
P11,"43:07,480","43:33,300","Not asking for help until you are to the limits of crying, because you will be looked down upon if you do.","So I try to only ask for help when I literally don't have a choice. Like I've worked on something for three days and it's like, okay, I tried everything. Because if you ask for help before you're like crying, it's looked down upon basically, because you couldn't deal with it yourself.",,,,,,,,,,
P11,"50:20,200","50:31,720","Reasons about why the lack of helping as not people not wanting to help, but because it’s a distraction from delivering features and proving their worth",And I think that's also what contributes to the lack of helping or like people not wanting to help because it's distracting from them delivering features and proving their worth.,,,,,,,,,,
P11,"29:13,560","29:40,000",Shares a story of how knowledge of why was lost to the ethers,"So the solution to that unfortunately was just restarting it many times in different orders. So there's no rhyme or reason to that, or there might be, but it's so deep in the history, so deep in like this code base that no one has touched for 10 years that nobody knows. They're just like, turn it on, turn it off and on again. Like that's what you have to do now.",,,,,,,,,,
P11,"19:29,980","19:57,860",Shares experience of working with legacy technology you don’t know,"that we're working with so many legacy code bases and so many deprecated libraries, that you're constantly working with a library you don't know. Like you don't know what this is, you don't know it. and it's old and no one's using it anymore. And so now you're just, you're Indiana Jonesing your way through the GitHub of this thing, through messages that are like seven years old.",,,,,,,,,,
P11,"26:09,380","26:28,960",So many console errors that can’t see when new things are broken.,there are so many console errors that are just there all the time that you can't use that because there's like 25 of them that are there all the time and they're not gonna get addressed. So it's almost impossible to go through it and find the console error that actually relates to what you're working on.,,,,,,,,,,
P11,"54:30,360","55:16,780","Summarizes main takeaways and things to note,  of barriers to making improvements with troubleshooting — developers are not given time because the priority of the company is maximizing profit, and developers during these troubleshooting moments are going to be stressed out, and not installing new things, or doing anything that requires them to learn anything, because they’re in a time crunch.","So I think that the main things to note is that developers don't have time and they're not given time because the priority of the company is maximizing profit. So in trouble shooting incidents, They're oftentimes going back to basics, like using console log because they're stressed out and they're not gonna be implementing new, like they're not gonna be installing new things unless they are also doing it as a hobby and they do this in their free time, like on the weekends. They're not gonna do anything that requires them to learn anything new because they're in a time crunch. They're just trying to figure out what's wrong.",,,,,,,,,,
P14,"40:41,160","41:12,080",Asking questions to understand the shared goal with troubleshooting,"I also wanna always make sure that people communicate what they're actually trying to do and not just the steps that they've taken. 'Cause sometimes people will say like, you know, I did X and Y and Z didn't happen. And I'm like, but what were you trying to do? Why did you want Z to happen? and sort of like build up that shared goal so that we both understand exactly what they were trying to do.",,,,,,,,,,
P14,"38:54,260","39:38,100","Contrasting knowing key things to share as context, vs people thinking you’re in their head","And I'm like, you know, look, here's and I try to tell the story, you know, like here's what I expected to happen. Here's what actually happened step by step and really like lay it out. But I don't usually get that level of detail when people are asking me to collaborate on their troubleshooting problems. I mean, sometimes it's ridiculous the extent to which they just think that I'm already in their head. Somebody will say, oh, I was trying to create a new FUBAR, and it didn't work. I'm like, well, OK. What did you-- what were your inputs? How did you know it didn't work? Was there an error message?",,,,,,,,,,
P14,"40:14,480","40:22,260",Highlighting the hardest thing with collaborating is lack of context and getting people up to speed with what’s going on,"But yeah, the lack of context is the hardest thing, is just getting people up to speed with what's going on.",,,,,,,,,,
P14,"49:07,100","49:34,020",Leaving yourself clues in the logging/telemetry to see a story in the data,"When you write software, instrument it, so that when you're looking at the results of that software having run, you can see a story in the data. You can see telemetry information about requests per second and all that kind of stuff in monitoring dashboards and logs and things like that. Leave yourself clues about what the software is doing instead of just it being a black box and you don't know what's going on inside.",,,,,,,,,,
P14,"32:32,740","33:10,760",Spending more time than is reasonable troubleshooting,"I sort of almost always spend more time than is reasonable trying to figure it out myself before going to someone for help. Personally, that's what I do. But I also see that in many other engineers, is that you just, you figure that things must be working correctly and you just don't understand something, so you try to build up your own knowledge and figure out what it is that you're missing. And you scour the documentation, and you look at the code, and you run the debugger, and you do all these things. And then when you're just absolutely fed up and there must be some magic thing that I've just never heard of, you start asking around,",,,,,,,,,,
P14,"38:12,120","38:40,820",Trying to help when people not providing enough context,"So I'm more often on the other end of the collaboration, just because I'm very senior within the organization. A lot of people have less experience than me. And the most common difficulty that I run into in that position is the people who are asking for help aren't asking for help well. So they don't provide enough context. They don't give me screenshots, information about what's going on to help me build the context that they have.",,,,,,,,,,
P15,"47:51,820","48:50,460","Being in a room together, can hear more verbal cues, more visual cues, like when someone is thinking, vs they know something or not, or whether somebody is completely lost.","I mean, just being together, like co-located somewhere, would probably help those a lot too, because it's really high bandwidth conversation that you're having with people. Because even that, even conversations over something like this, aren't quite the same, because the cadence of the talking is off. You're asking me questions and I'm answering them. But we're not having a back and forth conversation. And that's harder over Zoom. And exponentially harder as more people are joining in the conversation. And it's just not the same. It's like being right there in a meeting room and talking about something. You can hear more verbal cues. You can see more visual cues, like when somebody is thinking versus they know something or not, or somebody is just completely lost.",,,,,,,,,,
P15,"49:53,660","51:05,900",Connecting experience to developer flow and the concept of building up context and then using it to move your development forward,"mentioned is about developer flow. That whole concept of being able to build up context and then use it to move your development forward is definitely an important aspect of this. Because if you have meetings in between, or you have people pinging you or something, or you're having to pay attention to like, answering questions on Slack from somebody else or something, you can lose it. And it's hard to build that context back up again in your head to move the work forward. - Yeah. - So I'm very cognizant of that in other people and I try to kind of respect it as much as I can. That's why like I always post in Slack first ask somebody, like, if you're in a flow, we can do this a little bit later because I'm stuck. I don't want to stop your train from going. So, try to find a time where it's better for you, which might be like right before meeting where they know that they're going to lose it anyway,",,,,,,,,,,
P15,"23:17,380","23:53,680",Constantly trying to form a plan that makes sense on how to investigate,"Just like all the possibilities that-- the things I could do. I'm thinking of like, well, maybe I should contact this group. No, I shouldn't because there's some things I want to try first. You're constantly trying to form a plan that makes sense. And usually that plan is small enough that it can fit in your head. You don't need to write it down like in this case because I've just named two or three different things I'm going to try. But I might even throw that into to-do list if it formed, if it got longer, too.",,,,,,,,,,
P15,"02:54,360","03:43,500",Ease vs difficulty of troubleshooting is all about familiarity and expertise,"- Well, it's easy if you have intimate knowledge of the code that is generating the error. if you've run up against the error several times before. It's kind of like your experience that you have makes it easy. What's hard is if you encounter a new error that you've never seen before, if it's coming from maybe a different service that you don't own, you don't know a lot about, or a different part of the code that you don't know much about. Yeah, it's all about kind of familiarity and expertise that makes things easy versus hard.",,,,,,,,,,
P15,"22:18,260","23:08,940",Getting up and walking away is a wizard move as sometimes you get so locked in to what you’re doing and need to step away,"- Oh, the usual, like, I'm never gonna figure this out, what's going on, my life is over, I'll never advance this problem, you know, all those things. And then your experience kicks in and you're like, okay, this too shall pass. Maybe you should get up and walk away from your keyboard briefly. Just think about it outside of a computer altogether. And I did, I thought of that while I was walking downstairs, like it popped into my head because sometimes you get so locked in to what you're doing. And I mean, this is a real-- this is like a wizard move, is to just step away. Go out and get some coffee. It totally helps. I've found that many times over my career.",,,,,,,,,,
P15,"16:58,660","17:21,220",Having an investigative idea pop into my head for something to check that might be causing the problem while walking down for lunch,"So this just popped into my head when I was walking down for lunch earlier today. It's like, oh, I've got to remember that. So I'm going to look into that as well. And that's something I'm going to do before I contact anybody else. I try to cross all those things off first before I ask a question that's unnecessary.",,,,,,,,,,
P15,"33:29,180","34:25,620","Highlights importance of asking questions in the open, is usually questions that you ask are questions that other people have","And usually questions that you ask are questions that other people have. So you want to keep those as public as possible. possible. So I do that. I try not to direct message, like private message anybody. I try to keep it very public. I try to give enough context on the problem. And I'll post a question to a Slack channel, and I'll provide links to any relevant stuff, whether it's like a PR or if it's a problem I'm having on a particular branch, something like that. that if it's a production problem, I will include graphs and as much data as I can about what I think is happening. Yeah, just try to give as much context so that people don't have to look that up or ask me additional questions. They can just dive right into it.",,,,,,,,,,
P15,"43:01,580","44:12,880","Individually getting stuck, where as a team troubleshooting, people know of options others didn’t even know existed, like having a trivia team at a bar","I think individually, you just get stuck sometimes individually. And different people have seen different-- like in this case, we're using this web UI for this tool inside our company. And yeah, it just-- people knew of screens or of options that others just didn't even know existed. And we'd each been exposed to this platform we were trying to use. We all had parts of knowledge about it. So coming together, we're able to put that into-- it's like having a trivia team at a bar, one person versus five people. Five people, you're going to have the sports expert. You're going to have the music expert. And that's how it is when you're coming together to debug a problem. You've got all those brains together. And it's just more impactful.",,,,,,,,,,
P15,"23:58,360","24:41,320",Key from experience: Questioning every assumption you have about how things work,"And then another thing from lots of experience, I know this, what you have to do is question every assumption that you have about how things work. That is key in finding out what the solution to a problem is. Because usually, it's something that you're assuming is working a particular way that does not is not working that way. And you'll go all the way around. You'll investigate all the way around it without zooming into that and saying, let me just verify that this is truly the case. But when you're really troubleshooting, you've got to question everything.",,,,,,,,,,
P15,"46:10,380","47:17,900","Missing the experience of a whiteboard, drawing by hand and arm, designing software in front of a white board.","And for that matter, a whiteboard. I miss that too a lot because it's not quite-- again, I have not seen a tool that-- I don't want to use a stupid mouse. I want to use something that's-- I want to draw on a board by hand and arm. Like, we're good at that. And I feel like I could-- I miss that because a lot of the designs of software that we used to do, we used to do that quite a bit. And it feels just to be kind of missing totally, except for when you go into some draw program and just do laborious kind of like, oh, OK, here's the database canister, and here's some boxes, and all that. that's just not lightweight enough. And a whiteboard is like, done. So I think we got a ways to go still on those kinds of tools.",,,,,,,,,,
P15,"31:30,820","32:18,020",Respecting my teammate’s flow and try to not just constantly ping them with questions,"But I do try to respect my teammates' flow, and try not to just constantly ping them with questions. So yeah, once I've tried enough stuff, and I've kind of time boxed it where I think that-- and if I knew also that it's something that they would just know, I'm more willing to do it, more willing to ping them in that situation because it's not going to take a lot of their mental capacity to. If it's something that I think they're probably not going to know, that's when I try to do as much as I can to ask a better question, a more informed question.",,,,,,,,,,
P15,"27:24,480","28:33,020","Troubleshooting (10 difficulty) challenges that seem indeterminate and hard to reproduce, but are very real","- Oh, okay, yeah, those are the ones that seem almost indeterminate, like they're very hard to reproduce, yet they're very real. You know, bugs that appear to be in the layers beneath you also, that you tend to think of like foundational, well-tested bedrock kind of things that have errors in them, like compiler error or something like that, or an error in a graphics driver or something that's causing crashes. Those are the tough ones, like an error in some kind of Python wrapper code that's causing a crash down in the C libraries that it marshals parameters down into. Those are the tough ones.",,,,,,,,,,
P15,"41:40,240","42:01,040","Troubleshooting with multiple people by trying different things, sharing breakthrough discoveries","So people trying different things on their computers as well, and sharing when they have some kind of breakthrough. Eventually, we were able to stumble our way through it together with people making discoveries. ",,,,,,,,,,
P15,"18:13,740","18:44,120","Trying to exhaust all the things before asking more people, because it’s usually something can figure out","I put all these things on my list to do. And then if I'm still-- if these things don't yield any answers, I will try to ratchet up and raise it up the flagpole a little more and ask more people about it. But I really try to exhaust all the things I can think about first before doing that, Because it's usually something I can figure out myself.",,,,,,,,,,
P15,"40:05,620","40:34,900","When getting help on a troubleshooting problem, the first thing you do is rubber ducking, explaining everything to whoever is helping you, and sometimes that’s all you need","The first thing is you do the rubber ducking. You explain everything to whoever's helping you. And sometimes that's all you need to do. Then you're like, oh, OK, now I see. But yeah, so that, again, helps everybody build up the context they need to be able to help with whatever problem it is.",,,,,,,,,,
P16,"16:23,200","18:17,300","Shares why feeling good while troubleshooting because team worked really hard to create a good developer experience that made it fast and easy to point environment, and in other organizations this would take all morning, but all of it took 3-4 minutes","I think it was because, and like I think about this a lot, which is why I was so attracted to this topic is because we've worked where I where I work, we worked really hard to kind of make it to have a good developer experience. And all those tools that I described, make it like, relatively fast and easy to point from environment like to point from deployment A to deployment B to be able to then get all the proper authentication to be able to, sorry, to point from okay, sorry, to point my environment from A to B, and to then be able to launch the debugger, get go through steps like getting as like security authorization tokens and all that kind of stuff so that I can then make a query through my local instance of the Apollo GraphQL server and make the query. And then to be able to quickly with a few keystrokes, you know, go command space, and then type in dyn space, and then keywords for the table name that I know, and then enter and then I have it open. I have the AWS console open to the table and I can just inject an ID and do a query and look at the result. And that I mean, that takes like, probably all that is like, three to four minutes. Yeah. So I worked, I worked long. And the reason it makes me feel good is because I've worked long enough in other organizations to know that something like that could take, take like a, like, like a whole morning. Okay. So yeah.",,,,,,,,,,
P16,"01:50,320","02:34,720",Troubleshooting ease vs difficulty depends on “having tests” and the ability to get “very fast feedback” and can run everything locally ,"In one word would be tests, having tests. Like it. Okay, so that's, yeah, I can expand on that. So tests also, the not just tests, but the ability to get very fast feedback from my tests. And That is usually facilitated by making sure I can run everything locally, to put it one way, and not depend on outside infrastructure or architecture. And then tests are kind of,",,,,,,,,,,
P19,"17:40,640","18:23,920","At pairing company, developers work in a video chat room, that is like a pairing room, that anyone can join, and ask a quick question.  It’s an opt-in structure, so that if you need to be heads down, you don’t opt in","we use a tool that is basically, everyone can be in their own, or a few people can be like in a video chat room basically, and you can join anyone's room at any time. And so it's very common to just hop into somebody else's room and be like, Can you help me with this?"" And so it's nice because it's all video like immediately, so you don't have to, and you know that they're in that room because you can see that they're there. And so it allows for just quick, like ask a quick question. Don't have to like write it down or even enunciate what your problem is. You can just share your screen and be like, ""Can you look at this? Why is this happening?"" Right. Interesting.""",,,,,,,,,,
P19,"15:27,440","16:05,660","Compounding difficulty starts off very frustrating, but almost feels better at the end, because you climbed a bigger mountain","- Those, I think they start off very frustrating, like to the point where like sometimes it's like, I need to step away from this. Like I'm getting too close to it, I'm too frustrated. You know, I'm not in a good mental state to actually keep making progress on this. And, but I think once they're solved, I feel like they're all, you almost feel better because it's like you climbed a mountain. Like it was more effort, but it also like has more reward in the, like I did some good work today kind of a thing.",,,,,,,,,,
P19,"03:57,220","04:48,440",Describes troubleshooting difficulty in terms of the constrained scope where the unexpected behavior could be coming from,"I think there's the class of issues where it's like I'm looking at like a kind of a functional thing all the inputs and all the outputs are associated. And I consider that kind of one class because it's very constrained in what you're looking for. Whereas if I'm doing like an integration test where I'm connected to a database or whatever, there could be some issues there that are a little bigger than what I'm looking at, where like configuration settings in the app and stuff like that. I think that might be another kind of class of debugging I've had to deal with. then there's the bigger one that I mentioned earlier about infrastructure development where",,,,,,,,,,
P19,"25:14,700","25:40,060","Designing video rooms specifically for pairing and something people opt into by being logged into the room, and anybody can stop in","these are rooms that are specifically made for the work that they're doing. So if they're not able to talk to people, then they usually just log out of that room. And so it's something that they've opted into to be available in these kind of pairing rooms basically. So the assumption is kind of like, you're in your own little office and anybody can stop in. And if they're busy, you just wait.",,,,,,,,,,
P19,"19:25,280","19:59,280","Identifies initial knowledge transfer as part of the challenge that comes up with collaborating, and having a hard time explaining","I think the initial knowledge transfer  I think is definitely part of it, especially if I'm having a hard time explaining what the problem is, which sometimes happens, where it's just like, it's not working. And I can't, like, it's almost like if I knew how to explain it, I could have used Google. But sometimes it's just you don't know how to explain it. It's not",,,,,,,,,,
P19,"09:04,520","09:34,940","Implementing a feature and thinking it was done, then during a shower realized, oops, something I didn’t consider, and it wasn’t quite right and needed to be fixed","- Okay, so basically I implemented this feature and it was basically, we thought it was done and everything. And then it was one of those where it's like, I was showering and I realized that it was just completely wrong. Like it was like, I debugged it in my head for some reason. And so, yeah, so basically it was like, I woke up and just thought, oh, this is implemented wrong, basically.",,,,,,,,,,
P19,"01:27,900","01:45,700",Knowing where to look when something goes bad because of all the automated testing and the surface area of failure being low,"- So from me, I think the fact that we are heavily into automated testing and the fact that we run our tests very frequently usually means the surface area of failure is pretty low. So I generally know where to look when something goes bad",,,,,,,,,,
P19,"20:55,120","22:08,800","Pair programming has been a great boon to easier collaboration because there’s at least one other person that is in the context that can help explain, correct imprecisions and mistakes in how you spoke it","I think pair programming first of all has been a great boon because you at least have one other person that has that context. So if you need to bring in a third or fourth person, it's a little easier, I think, to have somebody else in that chat room with you helping to explain in a different way, right?  Because everyone has their own kind of view on things. And so if there is something that the two of you couldn't solve, which again happened today with some of the AWS stuff, I think it's just easier to get. And it's not just having another person to explain it in their own words. sometimes you're, at least me, is imprecise when I speak. And so you don't say things that are quite accurate. They're like kind of a rounding version of it. And that can make other people helping difficult. But if you have another person there that can explain a little better or correct a mistake in how you spoke it, basically. So I think pairing is a great way to deal with with that, just having another set of eyes on it.",,,,,,,,,,
P19,"01:58,100","02:14,460",Strategy: Starting from a known good state by running tests all the time (and keeping them passing),"So I think the biggest thing is just the fact that we have tests that we run all the time that, you know, before we started developing, it starts from a known good state. So it worked at one point. And then when we make the change, it's a smaller area to look to see what's wrong.",,,,,,,,,,
P23,"22:14,620","23:22,420","Finding that the more people you get collaborating, the more that coordinating people becomes a role in itself","Okay, so probably the biggest one is there's, the more people you get in, the more that coordinating people becomes a role in itself. Two and three people, you can usually just get them working together without too much trouble. Once you start getting above that, there's a thing if somebody needs to start keeping track of who's doing what, who's trying what, are different things that are being tried gonna interfere with each other, especially in collaborating on a problem against like a production system where there's only one of the system. That thing of making sure that two people aren't doing things that are going to inadvertently interfere with each other's results, which happens a ton. And then the other thing is bringing new people onto an investigation midstream. There's this tension between giving them the information they need to come up to speed and not spending all the time that you want to spend moving forward in the investigation on bringing one more person into the fold. We've got some strategies we use to deal with that, but it's, you know, that's probably the biggest challenge is just getting all of the humans coordinated.",,,,,,,,,,
P23,"32:25,540","32:56,300",Supporting developers in being able to see what their system is doing.  Troubleshooting is often simple if you can see what’s happening.,"I'd say one of the biggest things is probably supporting developers in being able to see what their system is doing. So, you know, troubleshooting is often simple, if you can just see what's happening. And usually, you know, like, like, in that example, like, the things that we that we saw misled us. So being able to understand the context of what's happening and being able to understand what is interesting at a time is all really helpful. Then one",,,,,,,,,,
P23,"03:45,320","04:30,560",Using a “Sherlock Holmes log” as a cognitive tool that includes everything I think and why do I think it,"And one of the big cognitive tools I like to use is I use, I sort of call it my Sherlock Holmes log. It's everything that I think and why do I think it? So, 'cause usually if I start writing that down, I don't go for this in like the early phases, but when something is starting to get intractable, it's like, okay, we know it isn't correlated to this because we did this test. We know that this data isn't successful. Why do we know that? Well, because when it's loaded by this other system, it doesn't work. And often that leads me to something else, like we know this function is getting the wrong output because when it's loaded by the system over there, it doesn't work. Well, but have we looked at the output? Do we know it's wrong? Maybe the system over there is actually the thing at fault. And a lot of the time that actually helps, is writing out that sort of what I believe and why.",,,,,,,,,,
P23,"08:31,680","09:05,080",Writing an email to a hypothetical developer I’m going to ask for help,"that I forced myself not to take those shortcuts. I often write an email to a hypothetical other developer, I'm going to ask for help, even with no idea who I might ask for help, even like Like when I'm most senior, I was the most senior developer in the organization, be like, okay, if there was a more senior developer, if there was somebody who was just a super expert, what would I ask them? And I writing out that email, I rarely send those. I rarely have to. The process of writing them out to like, what is all the information I would want to give to somebody who is more of an expert than me to not be wasting their time, usually allows me to be more than an expert than me and be like, wait, no, now I see what they would have seen.",,,,,,,,,,
P25,"12:30,420","13:22,480",Clarifying the meaning of “troubleshooting” in the context of the “creation process”,"So often I'll write a bit of code and then I'll write my little bit of testing code and be like, OK, this little sub thing works and then kind of build my complication. And in that process, I will often find errors or like things that don't quite work. like, oh, that's not going to work for how I did this, I'll have to do this a different way. So there's sort of like little localized troubleshooting that is very much a part of the creation process where I'm like testing the boundaries or seeing how something should fit together and just like it's part of the building process. So troubleshooting is maybe a strong word because it's not a problem, it's just how you work, I guess, right? I don't find it to be be particularly effective to just write a bunch of code and then kind of like go through it at the end. I like to like go through it as I go",,,,,,,,,,
P25,"40:34,180","40:39,180",Connects high trust environment with blameless environment as important to team culture,"So working in a really high trust environment and working in a blameless environment,",,,,,,,,,,
P25,"30:44,740","31:02,900","Contrasting this confidence of having tools to a junior that loses confidence where they   get despairing feeling that they are stupid, and it doesn’t work because they’re dumb. ","So there's that sort of confidence instead of kind of despairing or feeling self. Like, I mean, you see juniors do this all the time where they're like, Oh, I'm stupid. Like this doesn't work 'cause I'm dumb."" And like, that's not a good head space to be in.""",,,,,,,,,,
P25,"45:56,000","46:30,060",Contrasts not maintaining health of automated tooling systems resulting in error channel in chat that everyone mutes because it’s so noisy,"So I've definitely worked at companies where there was an error channel that everyone had muted because it was noisy. And they're like, oh, you don't have to worry about that one. And if you're ever saying you don't have to worry about that, it's wrong, fix it. Like your alert or your error is poor. You want it so that every time you get an alert, it is a real actionable thing. So really like maintaining those tools and cultivating them and putting the effort into those systems to help you understand what's going on, understand the state of your system so that you can then solve the problem.",,,,,,,,,,
P25,"09:48,440","10:12,580","Explaining how a person would explain their context, and recognize the error once they say it out loud","And that's when you're like, you know, you're explaining something and you're like, so one of the foundational concepts is… oh wait, I violated that, right? Like, now that you've said it out loud, you realize that your error, because you had to simplify it, be concise and like hit the most critical components, which is really, really nice. I think that's what it is. Yeah.",,,,,,,,,,
P25,"07:34,160","08:49,380",Explaining it to the bear on the filing cabinet,"So I'm a really huge fan of most people call it the duck effect, but I've always called it the teddy bear effect, because I had a profan university who once said, you know, like, you can come ask me questions about your assignment, but you have to explain it to the bear on the filing cabinet first. And if the bear can't solve your problem, then I'll talk to you. And it was just an illustration of that action of like, if you describe your issue out loud, often it will occur to you. So I would, I mean, I would rubber duck with colleagues all the time or have them just come glance. I mean, I've had really terrible mistakes where like I couldn't figure out why a bash script was loading. And it was just because the sun was hitting my monitor in such a way that I didn't see that there was literally a typo in like the very top line to find the bash script. And it wasn't until I showed a coworker that they're like, hey, that's wrong. And I'm like, oh, like, I swear I checked that. I thought I had I thought that was right. And it's just kind of classic blindness where you just couldn't see or were not in the right headspace. So those kinds of blunders where it's like, you can't reconcile reality with the output that you're seeing in the system. Having a second person, a second set of eyes, or even just someone to listen is shockingly effective.",,,,,,,,,,
P25,"46:30,060","46:36,000","Highlights the criticalness of understanding the state of the system, in order to solve the problem, and without understanding, you are guessing.","If you don't understand the state of the system, you can't solve it. You're just kind of, yeah, guessing.",,,,,,,,,,
P25,"37:49,580","38:11,980",Identifying benefit of remote is both having access to monitors,"That can sometimes be nice. One advantage of doing it remotely is you both have access to monitors. Often when you're collaborating in person, it's leaning over the same computer, but it's really nice to be maybe working on a problem and having someone doing their own search or looking for their own posts and resources to kind of help support solving the issue.",,,,,,,,,,
P25,"36:08,380","36:21,940","Limiting wheel spinning to 30 minutes or similar limited time, then calling a buddy","- If I've been wheel spinning for like more than 30 minutes, it's time to call in a buddy. It's just amazing how someone having an experience that you didn't or a piece of knowledge or just having fresh eyes.",,,,,,,,,,
P25,"16:09,840","16:25,120",Preferring not to interact with other humans when it comes to getting help for “generic problems”,"I don't actually want to interact with another human when it comes to these things. It's like being helped in a clothing store. I hate it, don't talk to me. So, I much prefer to hit things like official documentation. I'll also dig if it's an open source product, I'll dig into the GitHub repos,",,,,,,,,,,
P25,"37:16,520","37:49,580",Sharing example of “working in public”,"So there is a tech Slack channel where I can be like, hey, I'm having like a weird situation here. I'm going to like, in Slack, I can just start a call that's, or a huddle they call it now, that's public in the channel. And just be like, I'm in here. If someone's got a minute, like come join me. And then usually someone who is available will come and say hi in, you know, maybe 5, 10, 15 minutes, that kind of thing. So I really like those kind of collaborative spaces remotely. And then we'll do a video call. Usually I'll screen share, start doing the talking thing, and work out the problem.",,,,,,,,,,
P25,"30:33,100","30:44,740","Sharing importance of principle that the computer does exactly what it’s told, and relates back to confidence","Like it comes back to that principle I mentioned earlier where the computer is dumb. There's no like magic. It does exactly what it's told. And if you are persistent and thorough, you will find out why .",,,,,,,,,,
P25,"09:22,160","09:48,440","Sharing insight about why the bear is so effective, it’s not a set of questions, it’s preparing to explain it to someone else as if they have no idea what I’m talking about.","- Yeah, I mean, I think what it is is, it's not so much that I'm asking questions, is that I'm preparing to explain it to someone else as if they have no idea what I'm talking about. And it's that act of organizing your thoughts so that you can explain them to someone else so that they make sense to an external person. I think that's the part because, I mean, in a lot of ways, it does the same thing as challenging your assumptions is now you're having to lay them out.",,,,,,,,,,
P25,"45:30,180","45:42,840","Wanting this automatic systems highlighting and notifying you, instead of coming through the logs, which by contrast is described as primitive","I wouldn't have to go to the logs and see a log statement. Like that's really primitive. Like if you're coming through logs, you're doing it wrong. You want to have your automatic systems highlighting and notifying you.",,,,,,,,,,
P27,"10:27,800","10:59,520","Feeling engaged when troubleshooting, engaged in the step-by-step process, and having actual steps to try","- Engaged. I was engaged in the step-by-step process. So for me, the actual having steps to try and then checking if it worked and then going back and then checking the next step or trying this and then trying another step and then seeing if that worked. So I guess that was my curiosity. Oh, I wonder if this will work.",,,,,,,,,,
P27,"30:23,400","30:37,740","Feeling pretty safe doing refactoring as long as there’s lots of test coverage and I’m writing tests as I go, will get a lot more confident in a short time","It's probably pretty safe to do it as long as, there's a lot of test coverage already. So as long as I'm writing tests as I go, I think we're pretty good that way. So I think I will get a lot more confident in short time.",,,,,,,,,,
P27,"37:06,320","37:33,640",Highlighting importance of clear documentation from people that know how to write proper English that is succinct and there’s no double entendres.,"there's been so many, so much documentation I've read that was not clear. And so then it's easy to misinterpret it and then do it the wrong way because the wording isn't clear. So document clear documentation on two points is really good. People that know how to write English properly so that it is succinct and there's no double entendres.",,,,,,,,,,
P27,"14:15,640","14:50,240","Learning something new, a new framework or tool, there’s so much documentation could spend a few months learning before you start, except you have to dive right in","You know, sometimes learning something new or only partially learning a new software framework or development tool, there's so much documentation that really you could spend like a few months actually learning it before you start it. But usually you have to just dive right in and so you don't have all the information and you start doing things that are, you find out much later the wrong way to do it. and you have to go back and fix it because you didn't actually know how to use the tool.",,,,,,,,,,
P27,"18:30,240","19:04,440","People really stressed about metrics and being measured by performance because the company was cutting the bottom 10%, an awful place to work, people didn’t respond to questions","So you could put it on a channel where everybody was supposed to be listening. But everybody was really busy in that place. And they were really stressed about metrics. It was awful. And because they were being measured by performance and they were always like cutting the bottom 10%  or whatever. It was a really awful place to work. Anyways, and so people often didn't respond to questions. So usually you end up kind of floundering around on your own until you come up with another idea.",,,,,,,,,,
P27,"38:58,140","40:32,040","Sharing about article by Kent Beck about how sales and marketing teams of clear metrics and targets, but in software, trying to measure and it’s not clear, puts pressure on people that doesn’t result in a better product","other. I was just reading this great article from Kent Beck today about how software engineering companies are like, they've got their sales teams and they've got their marketing teams and they've got all these teams that have very clear metrics, like they met their target or they didn't meet their target. Like recruiting is another one that the recruiters hire their target number of people for then they've met their target. And if they've fallen short or exceeded it, very clear performance metrics. But for software developers, they're trying to measure it and it's not very clear. So people are doing things and I've happened, I had encountered the last two companies that I worked at. They were very keen on these metrics. And what I found was, and ____ was the same way. They had these, for ___ it was performance reviews, but it put this kind of pressure on people to get high ratings. And it didn't necessarily result in a better software product. And that was the point of Kent Beck's article was that these metrics systems put pressure on teams in ways that makes the, doesn't improve the software development process and doesn't improve the product. But it's really hard for CEOs and COOs to understand that. They can't, it's not like a sales team where you just go out and sell, sell, sell. And you're such a good performer if you can sell more.",,,,,,,,,,
P27,"17:10,840","18:09,440",Trying to not ask for help as much and digging in right way and only reach out for help when I need to,"And so I'll like talk to somebody about a problem right away instead of some... And I'm trying to get to not do this as much to like just dig in right away for myself and then only ask, reach out for help when I need to. So, yeah, for me, what's the point when I need to do that is when I've gone as far as I can, I guess. Yeah, when I've gone as far as I can and I'm running out of ideas, I've run out of ideas. And then I just kind of throw it out there and see if anybody else has got any ideas or the person I try to find the person who knows that area of code I'm working in, for example.",,,,,,,,,,
P27,"40:32,040","41:32,600","When people are measured by how many comments you put on a PR, how much code your write, how many hours you work, effect is not seeing support of your team, people less likely to help, people unhappy, loss of congeniality on the team that allowed people to talk to each other, really unhealthy and not conducive to collaboration","It's more, because collaboration piece, in that kind of a world, you don't, if you're being measured by how many comments you put on a PR or how many lines of code you write or how many kinds of code you remove or how many hours in a day you work. If those kinds of metrics are your performance, then they're not seeing you support your team, right? So in those kinds of environments, I noticed that people were less likely to help. and people were unhappy. And so there was not the congeniality on the team that allowed people to feel comfortable to talk to each other and be honest and just speak their minds. Yeah, it was a really unhealthy environment. So that is not conducive to collaboration. Yeah, that's what I found.",,,,,,,,,,
P27,"29:15,680","30:20,040","Working in somebody else’s codebase and not confident that I’ve understand all the nuances of why it was written that way, and afraid to make changes willy-nilly because afraid I’m going to break something else","Partly because when I'm working in somebody else's code base, I'm not confident that I've Understood everything. I haven't got all the nuances of why it was written the way it was written. So, I'm afraid to make changes willy-nilly because I'm afraid I'm going to break something else that's already working because I didn't understand it properly. Whereas if it's my code, I'll just dive in there and I'll just throw things out and write over it and rip it up. So, it's a lot faster for me, even if it's something I haven't touched, even if it was something that was badly written, I can sort of remember the gross logic of it and I'll just say, Oh, this is stupid,"" and I'll rewrite it completely. But I don't want to do that to somebody else's code because there may be some good reason, especially with somebody that still works at the company. But even if it's somebody who doesn't work at the company now, I can't ask them what their logic was. And yeah, there's a lot of refactoring going on in our code right now.""",,,,,,,,,,
P27,"19:59,080","20:14,600",Working on a small team where everyone is empowered to work on what seems like the right thing to work on.,"We're such a small team, and we're all pretty empowered in this organization to work on what seems like the right thing to work on for us.",,,,,,,,,,